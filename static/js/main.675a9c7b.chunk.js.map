{"version":3,"sources":["assets/texts/wassieworld.png","assets/icons/twitterlogoblack.png","assets/icons/discordlogoblack.png","assets/icons/solanalogoblack.png","assets/example.gif","pages/MintingPage/lib/store.ts","pages/MintingPage/lib/get-metadata.ts","pages/MintingPage/lib/state-helpers.ts","pages/MintingPage/hooks/useSolana.tsx","pages/MintingPage/Button.tsx","assets/star.svg","pages/MintingPage/CardHeader.tsx","pages/MintingPage/index.tsx","App.js","reportWebVitals.js","index.js","pages/MintingPage/lib/helpers.ts","pages/MintingPage/lib/connection.ts","pages/MintingPage/lib/mint.ts"],"names":["userStore","atom","key","default","undefined","walletPublicKey","userBalance","isWhiteListed","solanaExplorerLink","getMetadata","program","candyMachineId","a","account","candyMachine","fetch","state","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getCandyMachineState","provider","Program","fetchIdl","CANDY_MACHINE_PROGRAM","idl","console","error","checkWalletConnected","solana","connect","onlyIfTrusted","response","publicKey","toString","getUserBalance","connection","pk","web3","PublicKey","getBalance","existsOwnerSPLToken","whitelistToken","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","tokenAccounts","index","value","length","tokenAccount","tokenAmount","parsed","info","mint","uiAmount","log","connectWallet","useSolana","checkForPhantom","useState","window","phantom","setPhantom","attempts","setAttempts","solanaFail","setSolanaFail","useEffect","setInterval","isPhantom","prevAttempts","clearInterval","Button","cluster","updateCandyMachine","useRecoilState","user","setUser","isMinting","setIsMinting","mintSuccessful","setMintSuccessful","whitelistPrice","discountPrice","userWhitelisted","connectWalletButton","newUser","Keypair","generate","mintOneToken","mintTxId","status","err","awaitTransactionSignatureConfirmation","displaySuccess","mintPublicKey","newCandyMachine","confetti","particleCount","spread","origin","y","soldOut","getPhantom","walletConnect","waitForPublic","insufficientFunds","readyToMint","className","onClick","open","disabled","toUTCString","LAMPORTS_PER_SOL","toFixed","CardHeader","useRecoilValue","src","star","alt","slice","MintingPage","rpcUrl","process","opts","siteLoading","setSiteLoading","envError","setEnvError","setConnection","setCandyMachine","getUserInfo","Connection","candyMachinePublicKey","Provider","href","wassieLogo","target","rel","discordLogo","solanaLogo","twitterLogo","wassieGif","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","SequenceType","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","unsignedTxns","getRecentBlockhash","i","instructions","signers","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","catch","reason","StopOnFailure","Promise","all","txs","getUnixTs","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","confirmation","Error","simulateResult","simulateTransaction","logs","line","startsWith","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","message","result","queryStatus","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","payer","getAtaForMint","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","metadataAddress","getMasterEdition","masterEdition","getCandyMachineCreator","candyMachineCreator","creatorBump","anchor","SystemProgram","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","pubkey","isWritable","isSigner","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t","buyer","findProgramAddress","toBuffer","associatedTokenAddress","walletAddress","splTokenMintAddress","keys","TransactionInstruction","Buffer","from"],"mappings":"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","file":"static/js/main.675a9c7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/wassieworld.d18f3d96.png\";","export default __webpack_public_path__ + \"static/media/twitterlogoblack.1b7d4334.png\";","export default __webpack_public_path__ + \"static/media/discordlogoblack.78884197.png\";","export default __webpack_public_path__ + \"static/media/solanalogoblack.a562efa0.png\";","export default __webpack_public_path__ + \"static/media/example.7181bf93.gif\";","import { atom } from 'recoil';\nimport type { CandyMachineAccount, UserState } from \"../models\";\n\nexport const candyMachineStore = atom<CandyMachineAccount | undefined>({\n  key: 'candyMachine',\n  default: undefined,\n});\n\nexport const userStore = atom<UserState>({\n  key: 'user',\n  default: {\n    walletPublicKey: '',\n    userBalance: 0,\n    isWhiteListed: false,\n    solanaExplorerLink: '',\n  },\n});","import type { Idl, Program, web3 } from '@project-serum/anchor';\n\nexport const getMetadata = async (\n  program: Program<Idl>,\n  candyMachineId: web3.PublicKey\n) => {\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n","import { getMetadata } from \"../lib/get-metadata\";\nimport { CANDY_MACHINE_PROGRAM } from \"../lib/helpers\";\nimport { Idl, Program, Provider, web3 } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\n\nexport async function getCandyMachineState(\n  candyMachineId: web3.PublicKey,\n  provider: Provider\n) {\n  try {\n    const idl = await Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new Program(idl as Idl, CANDY_MACHINE_PROGRAM, provider);\n    return await getMetadata(program, candyMachineId);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function checkWalletConnected(solana: any) {\n  try {\n    const response = await solana.connect({ onlyIfTrusted: true });\n    return response.publicKey.toString();\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getUserBalance(\n  walletPublicKey: string,\n  connection: Connection\n) {\n  const pk = new web3.PublicKey(walletPublicKey);\n  try {\n    return await connection.getBalance(pk);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function existsOwnerSPLToken(\n  walletPublicKey: string,\n  connection: Connection,\n  whitelistToken: web3.PublicKey\n) {\n  try {\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      new web3.PublicKey(walletPublicKey),\n      {\n        programId: TOKEN_PROGRAM_ID,\n      }\n    );\n    for (let index = 0; index < tokenAccounts.value.length; index++) {\n      const tokenAccount = tokenAccounts.value[index];\n      const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\n\n      const mint = tokenAccount.account.data.parsed.info.mint;\n      if (mint === whitelistToken.toString() && tokenAmount.uiAmount > 0) {\n        console.log(\"Welcome to the whitelist!\");\n        return true;\n      }\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function connectWallet(solana: any) {\n  try {\n    const response = await solana.connect();\n    return response.publicKey.toString();\n  } catch (error) {\n    console.error(error);\n  }\n}","import { useEffect, useState } from \"react\";\n\nconst MAX_ATTEMPTS = 10;\n\nexport const useSolana = () => {\n  let checkForPhantom: any;\n  const [phantom, setPhantom] = useState((window as any).solana);\n  const [attempts, setAttempts] = useState(0);\n  const [solanaFail, setSolanaFail] = useState(false);\n\n  const getPhantom = () => {\n    checkForPhantom = !checkForPhantom && setInterval(() => {\n      const { solana } = window as any;\n      if (solana && solana?.isPhantom) {\n        setPhantom(solana);\n      }\n\n      setAttempts(prevAttempts => prevAttempts + 1);\n    }, 50);\n\n    if (phantom || attempts > MAX_ATTEMPTS) {\n      setSolanaFail(true);\n      clearInterval(checkForPhantom);\n    }\n  }\n  \n  useEffect(() => {\n    getPhantom();\n    return () => clearInterval(checkForPhantom);\n  }, [phantom, attempts]);\n\n  return {\n    solana: phantom,\n    solanaFail, \n  };\n};","import { useState } from 'react';\nimport { useRecoilState } from \"recoil\";\nimport confetti from 'canvas-confetti';\nimport { web3 } from '@project-serum/anchor';\nimport { Connection, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nimport { userStore } from \"./lib/store\";\nimport { mintOneToken } from './lib/mint';\nimport {\n  getUserBalance,\n  existsOwnerSPLToken,\n  connectWallet,\n} from './lib/state-helpers';\nimport { awaitTransactionSignatureConfirmation } from './lib/connection';\nimport { CandyMachineAccount } from './models';\nimport { useSolana } from './hooks/useSolana';\n\nconst Button = ({\n  cluster,\n  connection,\n  candyMachine,\n  updateCandyMachine,\n}: {\n  cluster: string | undefined,\n  connection: Connection | undefined,\n  candyMachine: CandyMachineAccount | undefined,\n  updateCandyMachine: (candyMachine: CandyMachineAccount) => void,\n}) => {\n  const { solana } = useSolana();\n  const [user, setUser] = useRecoilState(userStore);\n  \n  const [isMinting, setIsMinting] = useState(false);\n  const [mintSuccessful, setMintSuccessful] = useState(false);\n\n  const txTimeout = 30000;\n  const date = new Date(candyMachine?.state.goLiveDate?.toNumber() * 1000);\n  const price = candyMachine?.state.price;\n  const whitelistPrice = candyMachine?.state.whitelistMintSettings?.discountPrice;\n  const isActive = candyMachine?.state.isActive;\n  const isSoldOut = candyMachine?.state?.isSoldOut;\n  const userWhitelisted = user?.isWhiteListed;\n\n  const connectWalletButton = async () => {\n    const walletPublicKey = await connectWallet(solana);\n    const userBalance = walletPublicKey && connection ? await getUserBalance(walletPublicKey, connection) : undefined;\n    const isWhiteListed = walletPublicKey && connection\n    ? await existsOwnerSPLToken(\n        walletPublicKey,\n        connection,\n        candyMachine?.state.whitelistMintSettings?.mint,\n      )\n    : undefined;\n    const newUser = {\n      walletPublicKey,\n      ...(userBalance && { userBalance }),\n      ...(isWhiteListed && { isWhiteListed }),\n    };\n    setUser({ ...user, ...newUser });\n  };\n\n  const mint = async () => {\n    try {\n      setIsMinting(true);\n      if (candyMachine?.program && user?.walletPublicKey) {\n        const mint = web3.Keypair.generate();\n        const mintTxId = (\n          await mintOneToken(\n            candyMachine,\n            new web3.PublicKey(user.walletPublicKey),\n            mint\n          )\n        )[0];\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            txTimeout,\n            connection as Connection,\n            \"singleGossip\",\n            true\n          );\n        }\n        if (!status?.err) {\n          console.log(\"Success\");\n          displaySuccess(mint.publicKey);\n        } else {\n          console.error(\"An error occurred\");\n        }\n      }\n    } catch (error: any) {\n      console.error(\"An error occurred \", error);\n    } finally {\n      setIsMinting(false);\n    }\n  }\n\n  const throwConfetti = (): void => {\n    confetti({\n      particleCount: 200,\n      spread: 70,\n      origin: { y: 0.6 },\n    });\n  }\n\n  const displaySuccess = (mintPublicKey: web3.PublicKey) => {\n    // It takes time before state change is cascaded across the network\n    // so we update this variables manually upon successful completion\n    if (candyMachine) {\n      let solanaExplorerLink =\n        cluster === \"devnet\"\n          ? `https://explorer.solana.com/address/${mintPublicKey}?cluster=devnet`\n          : `https://explorer.solana.com/address/${mintPublicKey}`;\n\n      let newCandyMachine = candyMachine;\n      newCandyMachine.state.itemsRedeemed += 1;\n      \n      updateCandyMachine(newCandyMachine);\n      setMintSuccessful(true);\n      setUser({ ...user, solanaExplorerLink });\n  \n      throwConfetti();\n    }\n  }\n\n  const soldOut = isSoldOut;\n  const getPhantom = !isSoldOut && !solana;\n  const walletConnect = !isSoldOut && solana && !user.walletPublicKey;\n  const waitForPublic = !isSoldOut && solana && user.walletPublicKey && !isActive && !userWhitelisted;\n  const insufficientFunds =\n    !soldOut &&\n    solana &&\n    user.walletPublicKey &&\n    (isActive || userWhitelisted) &&\n    (userWhitelisted ? user.userBalance < whitelistPrice : user.userBalance < price);\n  const readyToMint = !(user.userBalance < price) && !isSoldOut && solana && user.walletPublicKey && (isActive || userWhitelisted);\n\n  return (\n    <div className=\"flex flex-col\">\n      {getPhantom && (\n        <button\n          className=\" px-3 py-2 rounded-md  bg-blue-600  hover:bg-blue-700 text-white font-bold\"\n          onClick={() => window.open(\"https://phantom.app/\", \"_blank\")}>\n            Get Phantom Wallet\n        </button>\n      )}\n      {walletConnect && (\n        <button\n          className=\" px-3 py-2 rounded-md  bg-blue-600  hover:bg-blue-700 text-white font-bold\"\n          onClick={connectWalletButton}>\n            Connect\n        </button>\n      )}\n      {waitForPublic && (\n        <button\n          className=\" px-3 py-2 rounded-md text-white font-bold bg-gray-400 cursor-not-allowed\"\n          disabled>\n            Public sale starts {date.toUTCString()}\n        </button>\n      )}\n      {soldOut && (\n        <button className=\" px-3 py-2 rounded-md  bg-gray-400 text-white font-bold cursor-not-allowed\">\n          Sold Out!\n        </button>\n      )}\n      {insufficientFunds && (\n        <button\n          className=\" px-3 py-2 rounded-md  bg-gray-400 text-white font-bold cursor-not-allowed\"\n          disabled={true}>\n            Insufficient Funds ({(\n            (userWhitelisted ? whitelistPrice : price) / LAMPORTS_PER_SOL\n          ).toFixed(2)} SOL required)\n        </button>\n      )}\n      {readyToMint && (\n        <button\n          className=\" px-3 py-2 rounded-md  bg-blue-600  hover:bg-blue-700 text-white font-bold disabled:bg-gray-400\"\n          disabled={isMinting}\n          onClick={mint}>\n          {isMinting && <span>Minting ...</span>}\n          {!isMinting && mintSuccessful && <span>Mint succesful! Mint another?</span>}\n          {!isMinting && !mintSuccessful && (\n            <span> Mint ({(\n                (userWhitelisted ? whitelistPrice : price) / LAMPORTS_PER_SOL).toFixed(2)} SOL)\n            </span>\n          )}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/star.c9ed945a.svg\";","import { useRecoilValue } from 'recoil';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nimport { userStore } from './lib/store';\n\nimport star from '../../assets/star.svg';\n\nconst CardHeader = () => {\n  const user = useRecoilValue(userStore);\n\n  return (\n    <div className=\"justify-end flex p-3\">\n      {user.isWhiteListed && (\n        <div className=\"flex mr-auto\">\n          <img src={star} alt=\"\" className=\"w-5 mr-2\" />\n          <div className=\"my-auto text-gray-600 text-sm\">Whitelist</div>\n        </div>\n      )}\n      <div className=\"flex\">\n        {user.walletPublicKey\n        ? (\n          <div className=\" flex flex-col\">\n            <div className=\"flex\">\n              <span className=\"my-auto mr-2 rounded-full h-2 w-2 bg-green-500\" />\n              <span className=\" my-auto text-gray-600 text-sm\">\n                {user.walletPublicKey?.slice(0, 8)}\n              </span>\n            </div>\n            <div className=\" text-xs text-gray-600 text-right \">\n              {(user.userBalance / LAMPORTS_PER_SOL).toFixed(2)} SOL\n            </div>\n          </div>\n        ) : (\n          <>\n            <span className=\"my-auto mr-2 rounded-full h-2 w-2 bg-gray-500\" />\n            <span className=\" my-auto text-gray-600 text-sm\"> Not Connected </span>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CardHeader;\n","import { useEffect, useState } from 'react';\nimport { Connection } from '@solana/web3.js';\nimport { Provider, web3 } from '@project-serum/anchor';\nimport { useRecoilState } from 'recoil';\n\nimport wassieLogo from '../../assets/texts/wassieworld.png';\nimport twitterLogo from '../../assets/icons/twitterlogoblack.png';\nimport discordLogo from '../../assets/icons/discordlogoblack.png';\nimport solanaLogo from '../../assets/icons/solanalogoblack.png';\nimport wassieGif from '../../assets/example.gif';\n\nimport { userStore } from './lib/store';\nimport {\n  getCandyMachineState,\n  checkWalletConnected,\n  getUserBalance,\n  existsOwnerSPLToken,\n} from './lib/state-helpers';\n\nimport Button from './Button';\nimport CardHeader from './CardHeader';\nimport './index.css';\nimport { CandyMachineAccount } from './models';\nimport { useSolana } from './hooks/useSolana';\n\n/***********************************/\n// Customise the app by changing the following variables.\n// const TITLE = \"Wassie World\";\nconst DESCRTIPTION = \"3,333 Randomly Generated 3D Wassies! Wassie World is a project focused on providing real life utility for all its holders!\";\nconst HEADER_TITLE = \"wassieworld.xyz\";\nconst HEADER_LINK = \"https://wassieworld.xyz\";\n// Your image or GIF needs to be in the /public folder for this to work\n// const IMAGE_LINK = \"../../assets/example.gif\";\n/***********************************/\n\nconst MintingPage = () => {\n  const rpcUrl = process.env.REACT_APP_SOLANA_RPC_HOST?.toString();\n  const cluster = process.env.REACT_APP_SOLANA_NETWORK?.toString();\n  const candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID?.toString();\n  const opts = { preflightCommitment: \"processed\" };\n  \n  const [user, setUser] = useRecoilState(userStore);\n\n  const [siteLoading, setSiteLoading] = useState<boolean>(true);\n  const [envError, setEnvError] = useState<boolean>(false);\n  const [connection, setConnection] = useState<Connection | undefined>(undefined);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount | undefined>(undefined);\n\n  const { solana, solanaFail } = useSolana();\n\n  const checkEnvError = () => {\n    // Check if populated\n    if (!rpcUrl || !candyMachineId || !cluster) {\n      if (!rpcUrl) {\n        console.error(\"RPC URL not populated\");\n      }\n      if (!candyMachineId) {\n        console.error(\"Candy Machine ID not populated\");\n      }\n      if (!cluster) {\n        console.error(\"Environment not populated\");\n      }\n      return true;\n    }\n    if (candyMachineId.length < 32 || candyMachineId.length > 44) {\n      console.error(\n        \"Candy Machine Public Key is invalid. Enter a length in-between 32 and 44 characters\"\n      );\n      return true;\n    }\n    return false;\n  }\n    \n  const getUserInfo = async ({\n    solana, connection, candyMachine\n  }: {\n    solana: any,\n    connection: Connection,\n    candyMachine: CandyMachineAccount | undefined,\n  }) => {\n    const walletPublicKey = await checkWalletConnected(solana);\n    const userBalance = walletPublicKey ? await getUserBalance(walletPublicKey, connection) : undefined;\n    const isWhiteListed = walletPublicKey\n    ? await existsOwnerSPLToken(\n      walletPublicKey,\n      connection,\n      candyMachine?.state.whitelistMintSettings?.mint,\n    ) : undefined;\n\n    const newUser = {\n      walletPublicKey,\n      ...(userBalance && { userBalance }),\n      ...(isWhiteListed && { isWhiteListed }),\n    };\n    return { ...user, ...newUser };\n  };\n      \n  useEffect(() => {\n    const isEnvError = checkEnvError();\n    if (isEnvError) {\n      setEnvError(true);\n      setSiteLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (solana || solanaFail) {\n      const connection = new Connection(rpcUrl as string);\n      const candyMachinePublicKey = new web3.PublicKey(candyMachineId as string);\n      const provider = new Provider(connection, solana, opts.preflightCommitment as web3.ConfirmOptions);\n      \n      (async () => {\n        const candyMachine = await getCandyMachineState(candyMachinePublicKey, provider);\n        const user = await getUserInfo({ solana, connection, candyMachine });\n        setCandyMachine(candyMachine);\n        setUser(user);\n      })();\n      \n      setConnection(connection);\n      setSiteLoading(false);\n    }\n  }, [solana, solanaFail]);\n    \n  const updateCandyMachine = (newCandyMachine: CandyMachineAccount) => {\n    setCandyMachine(newCandyMachine);\n  };\n\n  const itemsRedeemed = candyMachine?.state?.itemsRedeemed;\n  const itemsAvailable = candyMachine?.state?.itemsAvailable;\n    \n  return (\n    <div className=\"page-container h-full bg-blue-100\">\n      {/* <!-- Error section --> */}\n      {!siteLoading && envError && (\n        <div className=\"h-full flex\">\n          <div className=\"m-auto\">\n            An error occurred. Please check if your environment variables have been\n            populated correctly and redeploy the applcation.\n          </div>\n        </div>\n      )}\n      {/* <!-- Loading Section --> */}\n      {siteLoading && (\n        <div className=\" h-full flex\">\n          <div className=\"lds-hourglass m-auto\" />\n        </div>\n      )}\n      {!envError && !siteLoading && HEADER_TITLE && (\n        // <!-- Menu Bar -->\n        <div className=\"max-w-screen-lg flex mx-auto justify-around mt-4\">\n          <a\n            href={HEADER_LINK}\n            className=\"\">\n            <img src={wassieLogo} alt=\"logo\" className=\"w-24\"/>\n          </a>\n          <div className=\"max-w-md inline-flex float-right\">\n            <a\n              href=\"https://discord.gg/VWKcFRKdjK\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"w-16\">\n              <img src={discordLogo} alt=\"discord logo\" className=\"  \"/>\n            </a>\n            <a href=\"#\" className=\"w-16\">\n              <img src={solanaLogo} alt=\"solana logo\" className=\"\"/>\n            </a>\n            <a\n              href=\"https://twitter.com/Wassieworld\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"w-16 float-right\">\n                <img src={twitterLogo} alt=\"twitter logo\" className=\" \"/>\n            </a>\n          </div>\n        </div>\n      )}\n      {!envError && !siteLoading && (\n        // <!-- Card -->\n        <div className=\" fade-in max-w-lg mx-auto bg-blue-200 rounded-lg my-12   shadow-2xl\">\n          {/* <!-- Top Bar --> */}\n          <CardHeader />\n          <hr />\n          <br />\n          {/* <!-- Main Body --> */}\n          <div className=\"p-6\">\n            <img src={wassieGif} alt=\"wassie gif\" className=\" rounded-lg w-1/2 mx-auto m-5\" />\n            <div className=\" text-center text-lg sm:text-2xl font-mono font-bold py-5 tracking-wider \">\n              <img src={wassieLogo} alt=\"logo\" className=\"m-auto w-24\"/>\n            </div>\n            <div className=\"text-sm sm:text-md font-semibold pb-5 text-gray-600 \">\n              {DESCRTIPTION}\n            </div>\n            <Button\n              cluster={cluster}\n              connection={connection}\n              candyMachine={candyMachine}\n              updateCandyMachine={updateCandyMachine}/>\n\n            <div className=\" tracking-widest font-bold text-sm pt-3 text-gray-400\">\n              {itemsRedeemed}/{itemsAvailable} claimed\n            </div>\n            <div className=\"flex flex-col pt-3\">\n              {user.solanaExplorerLink && (\n                <a\n                  href={user.solanaExplorerLink}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"text-purple-700 font-semibold  p-1\">\n                    View on Solana Explorer\n                </a>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MintingPage;","// import Header from './components/header/header.js'\n// import Footer from \"./components/footer/footer.js\"\n// import About from \"./components/about/about.js\"\n// import Landing from \"./components/landing/landing.js\"\nimport MintingPage from \"./pages/MintingPage\";\n\nfunction App() {\n  return (\n    <>\n      {/* <Header />\n      <Landing /> */}\n      <MintingPage />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { web3 } from \"@project-serum/anchor\";\n\nexport const CANDY_MACHINE_PROGRAM = new web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nexport const TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n","import type {\n  Keypair,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  Commitment,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { Transaction } from \"@solana/web3.js\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch((reason) => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log(\"Caught failure\", e);\n        if (breakEarlyObject.breakEarly) {\n          console.log(\"Died on \", breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nexport async function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import * as anchor from \"@project-serum/anchor\";\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport { sendTransactions } from \"./connection\";\nimport type { CandyMachineAccount } from '../models';\nimport {\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  CANDY_MACHINE_PROGRAM,\n  TOKEN_METADATA_PROGRAM_ID,\n} from \"./helpers\";\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  mint: anchor.web3.Keypair\n): Promise<(string | undefined)[]> => {\n  // const mint = anchor.web3.Keypair.generate();\n  console.log(mint.publicKey);\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1\n          )\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            []\n          )\n        );\n      }\n    }\n  }\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber()\n      )\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        []\n      )\n    );\n  }\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []]\n      )\n    ).txs.map((t) => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n"],"sourceRoot":""}